#             |************|                                                       ----------------
#             |*U1**U2**U3*|                                                       | 0  | 1  | 2  |
#             |************|                                                       ----------------
#             |*U4**U5**U6*|                                                       | 3  | 4  | 5  |
#             |************|                                                       ----------------
#             |*U7**U8**U9*|                                                       | 6  | 7  | 8  |
#             |************|                                                       ----------------
# ************|************|************|************               -------------------------------------------------------------
# *L1**L2**L3*|*F1**F2**F3*|*R1**R2**R3*|*B1**B2**B3*               | 9  | 10 | 11 | 18 | 19 | 20 | 27 | 28 | 29 | 36 | 37 | 38 |
# ************|************|************|************               -------------------------------------------------------------
# *L4**L5**L6*|*F4**F5**F6*|*R4**R5**R6*|*B4**B5**B6*               | 12 | 13 | 14 | 21 | 22 | 23 | 30 | 31 | 32 | 39 | 40 | 41 |
# ************|************|************|************               -------------------------------------------------------------
# *L7**L8**L9*|*F7**F8**F9*|*R7**R8**R9*|*B7**B8**B9*               | 15 | 16 | 17 | 24 | 25 | 26 | 33 | 34 | 35 | 42 | 43 | 44 |
# ************|************|************|************               -------------------------------------------------------------
#             |************|                                                       ----------------
#             |*D1**D2**D3*|                                                       | 45 | 46 | 47 |
#             |************|                                                       ----------------
#             |*D4**D5**D6*|                                                       | 48 | 49 | 50 |
#             |************|                                                       ----------------
#             |*D7**D8**D9*|                                                       | 51 | 52 | 53 |
#             |************|                                                       ----------------


#             |************|                                                       ----------------
#             |*W **W **W *|                                                       | 0  | 1  | 2  |
#             |************|                                                       ----------------
#             |*W **W **W *|                                                       | 3  | 4  | 5  |
#             |************|                                                       ----------------
#             |*W **W **W *|                                                       | 6  | 7  | 8  |
#             |************|                                                       ----------------
# ************|************|************|************               -------------------------------------------------------------
# *O **O **O *|*G **G **G *|*R **R **R *|*B **B **B *               | 9  | 10 | 11 | 18 | 19 | 20 | 27 | 28 | 29 | 36 | 37 | 38 |
# ************|************|************|************               -------------------------------------------------------------
# *O **O **O *|*G **G **G *|*R **R **R *|*B **B **B *               | 12 | 13 | 14 | 21 | 22 | 23 | 30 | 31 | 32 | 39 | 40 | 41 |
# ************|************|************|************               -------------------------------------------------------------
# *O **O **O *|*G **G **G *|*R **R **R *|*B **B **B *               | 15 | 16 | 17 | 24 | 25 | 26 | 33 | 34 | 35 | 42 | 43 | 44 |
# ************|************|************|************               -------------------------------------------------------------
#             |************|                                                       ----------------
#             |*Y **Y **Y *|                                                       | 45 | 46 | 47 |
#             |************|                                                       ----------------
#             |*Y **Y **Y *|                                                       | 48 | 49 | 50 |
#             |************|                                                       ----------------
#             |*Y **Y **Y *|                                                       | 51 | 52 | 53 |
#             |************|                                                       ----------------


#   W
# O G R B
#   Y

class Converter:

    def __init__(self):
        self.pic_face = None
        self.cube_string = None
        self.solver_string = None
        self.possibility = [
            ['W', 'G', 'R', 'B', 'Y', 'O'],
            [['W', 'B'], ['W', 'R'], ['W', 'G'], ['W', 'O'], ['Y', 'B'], ['Y', 'R'], ['Y', 'G'], ['Y', 'O'], ['R', 'B'],
             ['G', 'R'], ['O', 'G'], ['B', 'O']],
            [['B', 'O', 'W'], ['R', 'O', 'W'], ['B', 'R', 'W'], ['G', 'R', 'W'], ['B', 'R', 'Y'], ['B', 'O', 'Y'],
             ['G', 'O', 'Y'], ['G', 'R', 'Y'], ],
        ]

    def face_to_cube(self, pic_face):
        self.pic_face = pic_face
        self.__first_crown__()
        # Generate the crown of the first face
        # generate the middle crown
        # generate the last crown

    def __first_crown__(self):
        res = []
        for i in range(3):
            for j in range(3):
                if (i == 0 or i == 2) and (j == 0 or j == 2):
                    res.append(self.__piece_mapper__(self.pic_face[i][j], 3))
                elif i == 1 and j == 1:
                    res.append(self.__piece_mapper__(self.pic_face[i][j], 1))
                else:
                    res.append(self.__piece_mapper__(self.pic_face[i][j], 2))
        print(self.possibility)
        print()
        print(res)
        print()
        print()

    def __piece_mapper__(self, color, face_nb):
        if face_nb == 1:
            idx = self.possibility[0].index(color)
            res = self.possibility[0][idx]
            self.possibility[0].pop(idx)
        elif face_nb == 2:
            res = None
            for bi_face in self.possibility[1]:
                if color in bi_face:
                    res = bi_face
                    break
            if res == None:
                exit(1)
            idx = self.possibility[1].index(res)
            self.possibility[1].pop(idx)
        else:
            res = None
            for bi_face in self.possibility[2]:
                if color in bi_face:
                    res = bi_face
                    break
            if res == None:
                exit(1)
            idx = self.possibility[2].index(res)
            self.possibility[2].pop(idx)
        return res
